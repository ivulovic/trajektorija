{"title":"Библиотека прилагођених елемената","description":"О процесу изградње библиотеке састављене од неограниченог броја елемената","html":"\n<p>\n  Постоји вероватно много начина како се креира библиотека састављена од прилагођених елемената. Ја сам за данашњу тему одабрао онај који је мени деловао најједноставније.\n</p> \n\n<p>\n  Као што сам поменуо у једном од својих претходних чланака, повремено се појави потреба да користећи своје ресурсе и постојећу инфраструктуру направимо библиотеку \n  састављену од одређених компоненти и потом доставимо другима на коришћење.\n  Не знам да ли је само мени на први поглед деловало компликовано, али суштина је да се помоћу конфигурације направи сноп Јаваскрипт кода који после други могу да увозе.\n</p> \n\n<p>\n  Као последица учења нових ствари моје мишљење о алатима које сам користио се драстично мењало.\n  Једног дана сам наишао на блог, стар око десетак година, који је за мало старије записе лепо напоменуо:\n  „Овај чланак је стар више од две године. Сасвим је могуће да се моје мишљење на ову тему данас уопште не слаже са овде написаним.”.\n  Веома ми се свидело то што сам видео, тако да имаш право да погађаш само једном шта ћу данас да правим.\n  </p> \n\n<p>\n  Компонента која треба да буде обележена као прилагођена се од обичне разликује само по томе што \n  садржи специјални обележивач који нам пружа Свелт: <span class=\"code\">&lt;svelte:options /&gt;</span>. \n  Овај обележивач као параметар прима и назив по ком ћемо га, када увеземо библиотеку, позивати у нашој апликацији.\n</p> \n\n<code>\n<pre>\n&lt;script&gt;\n  ... \n  export let date;\n  const currentYear = new Date().getFullYear();\n  const dateYear = new Date(+date).getFullYear();\n  const shouldShow = currentYear - dateYear &gt;= 2;\n&lt;/script&gt;\n\n&lt;style&gt;  \n  ...\n&lt;/style&gt;\n\n{#if shouldShow}\n  &lt;div&gt;\n    &lt;span&gt;\n      &lt;WarningIcon /&gt;\n    &lt;/span&gt;\n    &lt;p&gt;\n      Овај чланак је стар више од две године. Сасвим је могуће да се моје\n      мишљење на ову тему данас уопште не слаже са овде написаним.\n    &lt;/p&gt;\n  &lt;/div&gt;\n{/if}\n\n&lt;svelte:options tag=\"deprecated-warning\" /&gt;\n</pre>\n</code>\n\n<p>\n  Оно што нас занима овде је датум који нам стиже споља. Једноставно поредимо тренутни\n  и прослеђени датум и ако испуњава наш интерни услов онда приказујемо обавештење. \n  На крају кроз <span class=\"code\">svelte:options</span> кажемо како хоћемо да се наша компонента зове, односно обележивач\n  који ћемо да користимо да бисмо је приказали. \n\n  Наравно ову компоненту сам могао да направим да буде још више конфигурабилна, тако да особа која је користи може да бира оно што ће\n  исписивати или да може да накачи неколико функција које ће, слушајући на одређене догађаје, да манипулишу компонентом. \n  Идеја овог чланка је више да покажем процес имплементације компоненте и начин на који можемо да направимо сноп.\n</p> \n\n<p>\n За потребе прављења снопа требаће ми алат којим могу да направим минификовани фајл користећи одређену конфигурацију. \n У овом случају користићу <a href=\"https://rollupjs.org/guide/en/\" target=\"_blank\">Ролап</a>.\n</p> \n\n<code>\n<pre>\nimport svelte from 'rollup-plugin-svelte';\nimport resolve from '@rollup/plugin-node-resolve';\nconst terser = require('rollup-plugin-terser').terser;\nimport pkg from './package.json';\n\nconst name = pkg.name;\n\nexport default {\n\tinput: 'src/index.js',\n\toutput: [{ file: pkg.main, 'format': 'umd', name, plugins: [ terser() ] }],\n\tplugins: [\n\t\tsvelte({ customElement: true }),\n\t\tresolve(),\n\t]\n}\n</pre>\n</code>\n\n<p>\n Оно што ће ова конфигурација направити је минификовани Јаваскрипт фајл који у себи садржи компоненте које смо извезли кроз \n фајл који смо дефинисали као улазни, кроз поље <span class=\"code\">input</span>. \n У овом фајлу су само пописане компоненте које хоћемо да извеземо, а које ће потом да буду укључене у нашу библиотеку.\n</p> \n\n<p>\n Оно што је још важно је да, када хоћемо да извеземо прилагођене елементе, \n морамо и да напоменемо у Ролап конфигурацији да ћемо имати бар један прилагођени елемент. Ово је немогуће пропустити,\n јер ће и компонента коју смо дефинисали да буде прилагођена такође обавестити развијаоца да обавезно каже Свелту да такве \n компоненте постоје.\n</p> \n\n<p>\n Када коначно направимо конфигурацију какву желимо и добијемо фајл који можемо да увеземо, компоненту у свом коду користимо \n онако како смо дефинисали кроз <span class=\"code\">svelte:options</span>. \n \n У случају да нашу новокреирану компоненту хоћемо да убацимо у ХТМЛ фајл, позивање би било крајње једноставно, \n као када бисмо позвали било који други обележивач, с тим што за прослеђивање вредности нису потребни никакви префикси, што додатно олакшава коришћење.\n</p> \n","slug":"biblioteka-prilagodjenih-elemenata","categories":[{"id":"svelte","label":"Свелт"},{"id":"rollup","label":"Ролап"}],"date":1623360366065,"metadata":{"title":"Библиотека прилагођених елемената","description":"О процесу изградње библиотеке састављене од неограниченог броја елемената","keywords":"Свелт, Ролап","url":"https://trajektorija.com/biblioteka-prilagodjenih-elemenata","thumb":"https://trajektorija.com/images/posts/biblioteka-prilagodjenih-elemenata.png","thumbAlt":"Логотип сајта Трајекторија"}}